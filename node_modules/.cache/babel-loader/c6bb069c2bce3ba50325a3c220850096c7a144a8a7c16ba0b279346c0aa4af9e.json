{"ast":null,"code":"var _jsxFileName = \"/Users/benjamingreenfield/Documents/react/lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board(_ref) {\n  _s();\n  let {\n    nrows,\n    ncols,\n    chanceLightStartsOn\n  } = _ref;\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let r = 0; r < nrows; r++) {\n      let row = [];\n      for (let c = 0; c < ncols; c++) {\n        row.push(Math.random() > 0.5);\n      }\n      initialBoard.push(row);\n    }\n    console.log(initialBoard);\n    return initialBoard;\n  }\n  function hasWon() {\n    let result = true;\n    for (let row of board) {\n      for (let cell of row) {\n        if (cell) {\n          result = false;\n        }\n      }\n    }\n    return result;\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      // get number coords of the cell clicked\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n        if (x >= 0 && x < ncols && y + 1 >= 0 && y + 1 < nrows) {\n          boardCopy[y + 1][x] = !boardCopy[y][x];\n        }\n        if (x + 1 >= 0 && x + 1 < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x + 1] = !boardCopy[y][x];\n        }\n\n        //left\n        if (x - 1 >= 0 && x - 1 < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x - 1] = !boardCopy[y][x];\n        }\n        if (x >= 0 && x < ncols && y - 1 >= 0 && y - 1 < nrows) {\n          boardCopy[y - 1][x] = !boardCopy[y][x];\n        }\n        //down\n\n        return boardCopy;\n      };\n      // create a deep copy of the old board\n      let boardCopy = [];\n      for (let row of oldBoard) {\n        boardCopy.push([...row]);\n      }\n      // then flip all the necessary cells\n      let newBoard = flipCell(y, x, boardCopy);\n      return newBoard;\n    });\n  }\n  console.log(\"####################\", board);\n  if (hasWon()) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"You won!\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 24\n  }, this);else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Board\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: board.map((row, yidx) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: row.map((cellVal, xidx) => /*#__PURE__*/_jsxDEV(Cell, {\n                coord: `${yidx}-${xidx}`,\n                isLit: cellVal,\n                flipCellsAroundMe: flipCellsAround\n              }, `${yidx}-${xidx}`, false, {\n                fileName: _jsxFileName,\n                lineNumber: 109,\n                columnNumber: 43\n              }, this))\n            }, `row${yidx}`, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 13\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","_ref","_s","nrows","ncols","chanceLightStartsOn","board","setBoard","createBoard","initialBoard","r","row","c","push","Math","random","console","log","hasWon","result","cell","flipCellsAround","coord","oldBoard","y","x","split","map","Number","flipCell","boardCopy","newBoard","children","fileName","_jsxFileName","lineNumber","columnNumber","className","yidx","cellVal","xidx","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/Users/benjamingreenfield/Documents/react/lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    let initialBoard = [];\n    for (let r = 0; r < nrows; r ++){\n      let row = [];\n      for (let c = 0; c < ncols; c ++){\n         row.push(Math.random() > 0.5)\n      }\n      initialBoard.push(row)\n    }\n    console.log(initialBoard)\n    return initialBoard;\n  }\n\n  function hasWon() {\n    let result = true;\n   for(let row of board){\n    for(let cell of row){\n      if (cell){\n        result = false;\n      }\n    }\n   }\n   return result\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      // get number coords of the cell clicked\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      \n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n        if (x >= 0 && x < ncols && y+1 >= 0 && y+1 < nrows){\n          boardCopy[y+1][x] = !boardCopy[y][x];\n        }\n        if (x+1 >= 0 && x+1 < ncols && y >= 0 && y < nrows){\n          boardCopy[y][x+1] = !boardCopy[y][x];\n        }\n       \n        //left\n        if (x-1 >= 0 && x-1 < ncols && y >= 0 && y < nrows){\n          boardCopy[y][x-1] = !boardCopy[y][x];\n        }\n        if (x >= 0 && x < ncols && y-1 >= 0 && y-1 < nrows){\n          boardCopy[y-1][x] = !boardCopy[y][x];\n        }\n        //down\n      \n        return boardCopy\n      };\n      // create a deep copy of the old board\n      let boardCopy =[];\n      for (let row of oldBoard){\n        boardCopy.push([...row])\n      }\n      // then flip all the necessary cells\n      let newBoard = flipCell(y, x, boardCopy)\n      \n      return newBoard\n    });\n  }\n  console.log(\"####################\", board)\n  if (hasWon()) return <p>You won!</p>\n  else{\n    return(\n      <div className=\"Board\">\n        <table>\n          <tbody>\n          {board.map((row, yidx) => {\n          return (\n            <tr key={`row${yidx}`}>\n              {row.map((cellVal, xidx) => <Cell coord= {`${yidx}-${xidx}`} isLit={cellVal} flipCellsAroundMe= {flipCellsAround} key={`${yidx}-${xidx}`} />)}\n            </tr>\n            )\n          })}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,SAAAC,MAAA,IAAAC,OAAA;AAyBA,SAASC,KAAKA,CAAAC,IAAA,EAAwC;EAAAC,EAAA;EAAA,IAAvC;IAAEC,KAAK;IAAEC,KAAK;IAAEC;EAAoB,CAAC,GAAAJ,IAAA;EAClD,MAAM,CAACK,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAACY,WAAW,CAAC,CAAC,CAAC;;EAEjD;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB,IAAIC,YAAY,GAAG,EAAE;IACrB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,KAAK,EAAEO,CAAC,EAAG,EAAC;MAC9B,IAAIC,GAAG,GAAG,EAAE;MACZ,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,EAAEQ,CAAC,EAAG,EAAC;QAC7BD,GAAG,CAACE,IAAI,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,GAAG,GAAG,CAAC;MAChC;MACAN,YAAY,CAACI,IAAI,CAACF,GAAG,CAAC;IACxB;IACAK,OAAO,CAACC,GAAG,CAACR,YAAY,CAAC;IACzB,OAAOA,YAAY;EACrB;EAEA,SAASS,MAAMA,CAAA,EAAG;IAChB,IAAIC,MAAM,GAAG,IAAI;IAClB,KAAI,IAAIR,GAAG,IAAIL,KAAK,EAAC;MACpB,KAAI,IAAIc,IAAI,IAAIT,GAAG,EAAC;QAClB,IAAIS,IAAI,EAAC;UACPD,MAAM,GAAG,KAAK;QAChB;MACF;IACD;IACA,OAAOA,MAAM;EACd;EAEA,SAASE,eAAeA,CAACC,KAAK,EAAE;IAC9Bf,QAAQ,CAACgB,QAAQ,IAAI;MACnB;MACA,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGH,KAAK,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,MAAM,CAAC;MAG3C,MAAMC,QAAQ,GAAGA,CAACL,CAAC,EAAEC,CAAC,EAAEK,SAAS,KAAK;QACpC;QACA,IAAIL,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,IAAIoB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,EAAE;UAC9C2B,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;QACpC;QACA,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,IAAIoB,CAAC,GAAC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAC,CAAC,GAAGrB,KAAK,EAAC;UACjD2B,SAAS,CAACN,CAAC,GAAC,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;QACtC;QACA,IAAIA,CAAC,GAAC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAC,CAAC,GAAGrB,KAAK,IAAIoB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,EAAC;UACjD2B,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;QACtC;;QAEA;QACA,IAAIA,CAAC,GAAC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAC,CAAC,GAAGrB,KAAK,IAAIoB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,EAAC;UACjD2B,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,GAAC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;QACtC;QACA,IAAIA,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGrB,KAAK,IAAIoB,CAAC,GAAC,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAC,CAAC,GAAGrB,KAAK,EAAC;UACjD2B,SAAS,CAACN,CAAC,GAAC,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACK,SAAS,CAACN,CAAC,CAAC,CAACC,CAAC,CAAC;QACtC;QACA;;QAEA,OAAOK,SAAS;MAClB,CAAC;MACD;MACA,IAAIA,SAAS,GAAE,EAAE;MACjB,KAAK,IAAInB,GAAG,IAAIY,QAAQ,EAAC;QACvBO,SAAS,CAACjB,IAAI,CAAC,CAAC,GAAGF,GAAG,CAAC,CAAC;MAC1B;MACA;MACA,IAAIoB,QAAQ,GAAGF,QAAQ,CAACL,CAAC,EAAEC,CAAC,EAAEK,SAAS,CAAC;MAExC,OAAOC,QAAQ;IACjB,CAAC,CAAC;EACJ;EACAf,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEX,KAAK,CAAC;EAC1C,IAAIY,MAAM,CAAC,CAAC,EAAE,oBAAOnB,OAAA;IAAAiC,QAAA,EAAG;EAAQ;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAG,CAAC,MAChC;IACF,oBACErC,OAAA;MAAKsC,SAAS,EAAC,OAAO;MAAAL,QAAA,eACpBjC,OAAA;QAAAiC,QAAA,eACEjC,OAAA;UAAAiC,QAAA,EACC1B,KAAK,CAACqB,GAAG,CAAC,CAAChB,GAAG,EAAE2B,IAAI,KAAK;YAC1B,oBACEvC,OAAA;cAAAiC,QAAA,EACGrB,GAAG,CAACgB,GAAG,CAAC,CAACY,OAAO,EAAEC,IAAI,kBAAKzC,OAAA,CAACF,IAAI;gBAACyB,KAAK,EAAI,GAAEgB,IAAK,IAAGE,IAAK,EAAE;gBAACC,KAAK,EAAEF,OAAQ;gBAACG,iBAAiB,EAAGrB;cAAgB,GAAO,GAAEiB,IAAK,IAAGE,IAAK,EAAC;gBAAAP,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAG,CAAC;YAAC,GADrI,MAAKE,IAAK,EAAC;cAAAL,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEjB,CAAC;UAEP,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACK;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAEV;AAEF;AAAClC,EAAA,CAzFQF,KAAK;AAAA2C,EAAA,GAAL3C,KAAK;AA2Fd,eAAeA,KAAK;AAAC,IAAA2C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}